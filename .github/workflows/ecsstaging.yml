name: Deploy to Amazon ECS DEV

on:
  push:
    branches:
      - ecsstg
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                  
  ECR_REPOSITORY: rewards-bot-stg
  ECS_SERVICE: optimus-staging            
  ECS_CLUSTER: optimus-staging         
  ECS_TASK_DEFINITION: optimus-staging                                 
  CONTAINER_NAME: optimus

                                    

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set env
        run: |
          secret_value=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id stg/reward-bot/backend --query SecretString --output text)
          #apt install jq -y
          yaml_value=$(echo "$secret_value" | jq -r 'to_entries[] | "\(.key)= \(.value)"' | sed 's/^/  /')
          yaml_value="$(echo -e "---\n$yaml_value")"
          # Output the YAML value
          echo "$yaml_value" > .env
          #cat .env

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #IMAGE_TAG: latest
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          sed -i "s|<changeme>|$IMAGE_TAG|g" ./terraform/ecs-stg/ecs-service.tf
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          #echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Download task definition
      #   run: |
      #       aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json



      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}


      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2
            # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init 
        run: terraform init
        working-directory: ./terraform/ecs-stg
      - name: Terraform state
        id: state
        run: terraform state rm aws_ecs_task_definition.service
        continue-on-error: true
        working-directory: ./terraform/ecs-stg

          
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/ecs-stg              
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false 
            #continue-on-error: true
        working-directory: ./terraform/ecs-stg
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false 
        working-directory: ./terraform/1851-dev-ecs